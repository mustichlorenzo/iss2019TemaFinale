/* Generated by AN DISI Unibo */ 
package it.unibo.butlermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butlermind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[BUTLERMIND]: Started...")
						solve("consult('RHLocation.pl')","") //set resVar	
						solve("location(RH,X,Y)","") //set resVar	
						
										var CX=getCurSol("X").toString()
										var CY=getCurSol("Y").toString()
						if(currentSolution.isSuccess()) { forward("setLocation", "setLocation(rh,$CX,$CY)" ,"planner" ) 
						 }
						else
						{ println("Errore nel setting di RH")
						 }
						delay(3000) 
					}
					 transition( edgeName="goto",targetState="calibration", cond=doswitch() )
				}	 
				state("calibration") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("taskUpdate", "taskUpdate(butler,calibration,null,null)" ,"resourcemodelbutler" ) 
						forward("startCalibration", "startCalibration" ,"calibration" ) 
					}
					 transition(edgeName="t020",targetState="endCalibration",cond=whenDispatch("calibrationCompleted"))
				}	 
				state("endCalibration") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}

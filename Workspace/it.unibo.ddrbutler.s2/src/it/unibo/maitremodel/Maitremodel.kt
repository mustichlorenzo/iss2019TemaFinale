/* Generated by AN DISI Unibo */ 
package it.unibo.maitremodel

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitremodel ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[MAITRE_MODEL]: starts...")
					}
					 transition( edgeName="goto",targetState="waitingCmd", cond=doswitch() )
				}	 
				state("waitingCmd") { //this:State
					action { //it:State
						println("[MAITRE_MODEL]: waiting for a command...")
					}
					 transition(edgeName="t027",targetState="modelChanging",cond=whenDispatch("modelChange"))
					transition(edgeName="t028",targetState="modelUpdating",cond=whenDispatch("modelUpdate"))
					transition(edgeName="t029",targetState="updatingRoom",cond=whenDispatch("updateContent"))
				}	 
				state("modelUpdating") { //this:State
					action { //it:State
						println("[MAITRE_MODEL]: updating model...")
						if( checkMsgContent( Term.createTerm("modelUpdate(NAME,STATE)"), Term.createTerm("modelUpdate(maitre,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.maitre.resourceModelSupport.updateMaitreModel(myself ,payloadArg(1) )
						}
					}
					 transition( edgeName="goto",targetState="waitingCmd", cond=doswitch() )
				}	 
				state("modelChanging") { //this:State
					action { //it:State
						println("[MAITRE_MODEL]: received a modelChange command")
						if( checkMsgContent( Term.createTerm("modelChange(NAME,STATE)"), Term.createTerm("modelChange(maitre,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("modelChanged", "modelChanged" ,"maitre" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitingCmd", cond=doswitch() )
				}	 
				state("updatingRoom") { //this:State
					action { //it:State
						println("[MAITRE_MODEL]: received an updatingRoom command")
						if( checkMsgContent( Term.createTerm("updateContent(DEVICE,CODE,QNT)"), Term.createTerm("updateContent(DEVICE,CODE,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
					}
					 transition( edgeName="goto",targetState="waitingCmd", cond=doswitch() )
				}	 
			}
		}
}

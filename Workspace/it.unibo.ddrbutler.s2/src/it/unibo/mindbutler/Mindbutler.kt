/* Generated by AN DISI Unibo */ 
package it.unibo.mindbutler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Mindbutler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: starts...")
					}
					 transition( edgeName="goto",targetState="waitPrepare", cond=doswitch() )
				}	 
				state("waitPrepare") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: waiting for a prepare command...")
						if( checkMsgContent( Term.createTerm("reactivate"), Term.createTerm("reactivate"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[MIND_BUTLER]: i'm reactivated")
						}
					}
					 transition(edgeName="t00",targetState="startPrepare",cond=whenDispatch("prepare"))
				}	 
				state("startPrepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("prepare"), Term.createTerm("prepare"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[MIND_BUTLER]: received prepare command")
						}
						if( checkMsgContent( Term.createTerm("reactivate"), Term.createTerm("reactivate"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[MIND_BUTLER]: received reactivate command")
						}
						stateTimer = TimerActor("timer_startPrepare", 
							scope, context!!, "local_tout_mindbutler_startPrepare", 5000.toLong() )
					}
					 transition(edgeName="t01",targetState="endPrepare",cond=whenTimeout("local_tout_mindbutler_startPrepare"))   
					transition(edgeName="t02",targetState="prepareSuspend",cond=whenDispatch("stop"))
				}	 
				state("endPrepare") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: i'm finishing to prepare the room")
						forward("modelChange", "modelChange(maitre,prepare)" ,"maitremodel" ) 
						forward("prepareCompleted", "prepareCompleted" ,"mindbutler" ) 
					}
					 transition(edgeName="t03",targetState="waitAC",cond=whenDispatch("prepareCompleted"))
				}	 
				state("prepareSuspend") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: i'm in prepareSuspend")
					}
					 transition(edgeName="t04",targetState="startPrepare",cond=whenDispatch("reactivate"))
					transition(edgeName="t05",targetState="prepareSuspend",cond=whenDispatch("stop"))
				}	 
				state("waitAC") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: waiting for an another command...")
					}
					 transition(edgeName="t06",targetState="startAddFood",cond=whenDispatch("addFood"))
					transition(edgeName="t07",targetState="startClear",cond=whenDispatch("clear"))
				}	 
				state("startAddFood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("addFood(FOODCODE,QNT)"), Term.createTerm("addFood(FOODCODE,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[MIND_BUTLER]: received addFood command")
								println("FOOD_CODE: ${payloadArg(0)}, QNT: ${payloadArg(1)}")
						}
						if( checkMsgContent( Term.createTerm("reactivate"), Term.createTerm("reactivate"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[MIND_BUTLER]: received reactivate command")
						}
						stateTimer = TimerActor("timer_startAddFood", 
							scope, context!!, "local_tout_mindbutler_startAddFood", 5000.toLong() )
					}
					 transition(edgeName="t08",targetState="endAddFood",cond=whenTimeout("local_tout_mindbutler_startAddFood"))   
					transition(edgeName="t09",targetState="addFoodSuspend",cond=whenDispatch("stop"))
				}	 
				state("endAddFood") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: i'm finishing to add food")
						forward("modelChange", "modelChange(maitre,addFood)" ,"maitremodel" ) 
						forward("addFoodCompleted", "addFoodCompleted" ,"mindbutler" ) 
					}
					 transition(edgeName="t010",targetState="waitAC",cond=whenDispatch("addFoodCompleted"))
				}	 
				state("addFoodSuspend") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: i'm in addFoodSuspend")
					}
					 transition(edgeName="t011",targetState="startAddFood",cond=whenDispatch("reactivate"))
					transition(edgeName="t012",targetState="addFoodSuspend",cond=whenDispatch("stop"))
				}	 
				state("startClear") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("clear"), Term.createTerm("clear"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[MIND_BUTLER]: received clear command")
						}
						if( checkMsgContent( Term.createTerm("reactivate"), Term.createTerm("reactivate"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[MIND_BUTLER]: received reactivate command")
						}
						stateTimer = TimerActor("timer_startClear", 
							scope, context!!, "local_tout_mindbutler_startClear", 5000.toLong() )
					}
					 transition(edgeName="t013",targetState="endClear",cond=whenTimeout("local_tout_mindbutler_startClear"))   
					transition(edgeName="t014",targetState="clearSuspend",cond=whenDispatch("stop"))
				}	 
				state("endClear") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: i'm finishing to clear the room")
						forward("modelChange", "modelChange(maitre,clear)" ,"maitremodel" ) 
						forward("clearCompleted", "clearCompleted" ,"mindbutler" ) 
					}
					 transition(edgeName="t015",targetState="waitPrepare",cond=whenDispatch("clearCompleted"))
				}	 
				state("clearSuspend") { //this:State
					action { //it:State
						println("[MIND_BUTLER]: i'm in clearSuspend")
					}
					 transition(edgeName="t016",targetState="startClear",cond=whenDispatch("reactivate"))
					transition(edgeName="t017",targetState="clearSuspend",cond=whenDispatch("stop"))
				}	 
			}
		}
}

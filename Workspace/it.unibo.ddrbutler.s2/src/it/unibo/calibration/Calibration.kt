/* Generated by AN DISI Unibo */ 
package it.unibo.calibration

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Calibration ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[CALIBRATION]: Started...")
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition(edgeName="t016",targetState="forwardStep",cond=whenDispatch("startCalibration"))
				}	 
				state("forwardStep") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveCompleted"), Term.createTerm("moveCompleted"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											  	var positionX=
								itunibo.planner.moveUtils.getPosX(myself)
								var positionY=
								itunibo.planner.moveUtils.getPosY(myself)
								if(positionX==0 && positionY==0){
								forward("endBoundary", "endBoundary" ,"calibration" ) 
								}else{
								itunibo.planner.moveUtils.moveAhead(myself)
								}
						}
						if( checkMsgContent( Term.createTerm("startCalibration"), Term.createTerm("startCalibration"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.planner.moveUtils.moveAhead(myself)
						}
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition(edgeName="t017",targetState="forwardStep",cond=whenDispatch("moveCompleted"))
					transition(edgeName="t018",targetState="backtracking",cond=whenDispatch("moveFailed"))
					transition(edgeName="t019",targetState="terminazioneboundary",cond=whenDispatch("endBoundary"))
				}	 
				state("backtracking") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.backToCompensate(myself)
					}
					 transition(edgeName="t020",targetState="turnLeft",cond=whenDispatch("moveCompleted"))
				}	 
				state("turnLeft") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.rotateLeft90tuning(myself)
					}
					 transition(edgeName="t021",targetState="forwardStep",cond=whenDispatch("moveCompleted"))
				}	 
				state("terminazioneboundary") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
				}	 
			}
		}
}

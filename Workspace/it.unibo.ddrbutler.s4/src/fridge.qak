System fridge

Dispatch modelChangeFridge : modelChangeFridge(NAME, TASK, FOODCODE, QNT)
Dispatch modelChangedFridge : modelChangedFridge(NAME, TASK, FOODCODE, QNT)
Dispatch modelUpdateFridge : modelUpdateFridge(NAME, TASK, FOODCODE, QNT)

Context ctxFridge ip [host="localhost" port=3035]

QActor fridge context ctxFridge{
	["
		var qnt=-1
		var foodcode=\"\"
		var goToPut=false
	"]
	State s0 initial{
		println("[FRIDGE]: Started...")
		
		run itunibo.fridge.fridgeSupport.create()
		
	}
	
	State waitCmd{
		forward resourcemodelfridge -m modelUpdateFridge : modelUpdateFridge(fridge, idle, null, null)
	}
	Transition t0 whenMsg modelChangedFridge -> analyzeMessage
	
	State analyzeMessage{
		printCurrentMessage
		onMsg(modelChangedFridge : modelChangedFridge(NAME, TASK, FOODCODE, QNT)){
			["if(payloadArg(1).equals(\"put\")){
				goToPut=true
			}"]
			["if(payloadArg(1).equals(\"take\")){
				goToPut=false
			}"]
			["qnt = Integer.parseInt(payloadArg(3))"]
			["foodcode = payloadArg(2)"]
		}
	}
	Goto putDish if "goToPut" else takeDish
	
	State putDish{
		printCurrentMessage
		run itunibo.fridge.fridgeSupport.putFood(myself,foodcode,qnt)
	}
	Goto waitCmd
	
	State takeDish{
		printCurrentMessage
		run itunibo.fridge.fridgeSupport.putFood(myself,foodcode,qnt)
	}
	Goto waitCmd
}

QActor resourcemodelfridge context ctxFridge{
	State s0 initial{
		println("[RESOURCEMODEL FRIDGE]: Started...")
		
		solve(consult("sysRules.pl"))
		solve(consult("modelFridge.pl"))
		
		run itunibo.coap.serverCoap.create(myself)
	}
	
	State waitCmd{
		
	}
	Transition t0 whenMsg modelChangeFridge -> handleChange
				  whenMsg modelUpdateFridge -> handleUpdate
				  
	State handleChange{
		printCurrentMessage
		
		//i vari onMsg sono per un minimo di controllo sui messaggi che arrivano
		onMsg(modelChangeFridge : modelChangeTable(table,put,FC,QNT)){
			forward fridge -m modelChangeFridge : modelChangedTable($payloadArg(0),$payloadArg(1),$payloadArg(2),$payloadArg(3))			
		}
		
		
		onMsg(modelChangeFridge : modelChangeTable(table,take,FC,QNT)){
			forward fridge -m modelChangeFridge : modelChangedTable($payloadArg(0),$payloadArg(1),$payloadArg(2),$payloadArg(3))
		}
	}
	Goto waitCmd
	
	State handleUpdate{
		
		onMsg(modelUpdateFridge : modelUpdateTable(table,TASK,FC,QNT)){
			run itunibo.table.resourceModelSupport.updateTableModel(myself,payloadArg(1),payloadArg(2),payloadArg(3))
		}
	}
	Goto waitCmd
} 
/* Generated by AN DISI Unibo */ 
package it.unibo.resourcemodeltable

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Resourcemodeltable ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[RESOURCEMODEL TABLE]: Started...")
						solve("consult('tableModel.pl')","") //set resVar	
						solve("consult('sysRules.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t0102",targetState="handleChange",cond=whenDispatch("modelChangeTable"))
					transition(edgeName="t0103",targetState="handleUpdate",cond=whenDispatch("modelUpdateTable"))
				}	 
				state("handleChange") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("modelChangeTable(NAME,TYPE,TASK,FOODCODE,QNT)"), Term.createTerm("modelChangeTable(table,food,TASK,FC,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if( checkMsgContent( Term.createTerm("modelChangeTable(NAME,TYPE,TASK,FOODCODE,QNT)"), Term.createTerm("modelChangeTable(table,food,put,FC,QNT)"), 
								                        currentMsg.msgContent()) ) { //set msgArgList
										itunibo.table.resourceModelSupport.updateTableModel(myself ,payloadArg(1), payloadArg(2), payloadArg(3), payloadArg(4) )
										forward("modelChangedTable", "modelChangedTable(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)},${payloadArg(3)},${payloadArg(4)})" ,"table" ) 
								}
								if( checkMsgContent( Term.createTerm("modelChangeTable(NAME,TYPE,TASK,FOODCODE,QNT)"), Term.createTerm("modelChangeTable(table,food,take,FC,QNT)"), 
								                        currentMsg.msgContent()) ) { //set msgArgList
										itunibo.table.resourceModelSupport.updateTableModel(myself ,payloadArg(1), payloadArg(2), payloadArg(3), payloadArg(4) )
										forward("modelChangedTable", "modelChangedTable(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)},${payloadArg(3)},${payloadArg(4)})" ,"table" ) 
								}
						}
						if( checkMsgContent( Term.createTerm("modelChangeTable(NAME,TYPE,TASK,FOODCODE,QNT)"), Term.createTerm("modelChangeTable(table,dish,TASK,FC,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if( checkMsgContent( Term.createTerm("modelChangeTable(NAME,TYPE,TASK,FOODCODE,QNT)"), Term.createTerm("modelChangeTable(table,dish,put,FC,QNT)"), 
								                        currentMsg.msgContent()) ) { //set msgArgList
										itunibo.table.resourceModelSupport.updateTableModel(myself ,payloadArg(1), payloadArg(2), payloadArg(3), payloadArg(4) )
										forward("modelChangedTable", "modelChangedTable(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)},${payloadArg(3)},${payloadArg(4)})" ,"table" ) 
								}
								if( checkMsgContent( Term.createTerm("modelChangeTable(NAME,TYPE,TASK,FOODCODE,QNT)"), Term.createTerm("modelChangeTable(table,dish,take,FC,QNT)"), 
								                        currentMsg.msgContent()) ) { //set msgArgList
										itunibo.table.resourceModelSupport.updateTableModel(myself ,payloadArg(1), payloadArg(2), payloadArg(3), payloadArg(4) )
										forward("modelChangedTable", "modelChangedTable(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)},${payloadArg(3)},${payloadArg(4)})" ,"table" ) 
								}
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleUpdate") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("modelUpdateTable(NAME,TYPE,TASK,FOODCODE,QNT)"), Term.createTerm("modelUpdateTable(table,TYPE,TASK,FC,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.table.resourceModelSupport.updateTableModel(myself ,payloadArg(1), payloadArg(2), payloadArg(3), payloadArg(4) )
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}

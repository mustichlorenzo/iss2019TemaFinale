/* Generated by AN DISI Unibo */ 
package it.unibo.obstacledetector

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Obstacledetector ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var distance=9999
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[OBSTACLE-DETECTOR]: Started...")
						solve("consult('sonarConfig.pl')","") //set resVar	
						solve("detection(X)","") //set resVar	
						if(currentSolution.isSuccess()) { println("USING DETECTION DISTANCE : ${getCurSol("X")}")
						 }
						else
						{ println("no distance")
						 }
						distance=Integer.parseInt(getCurSol("X").toString())
					}
					 transition(edgeName="t01",targetState="handleSonarData",cond=whenDispatch("sonarRobot"))
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(DISTANCE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								 val D = Integer.parseInt( payloadArg(0) )
								if(D<=distance){
								forward("sonarUpdate", "sonarUpdate(sonar,${payloadArg(0)},obstacle)" ,"resourcemodelbutler" ) 
								emit("obstacle", "obstacle" ) 
								}else{
								forward("sonarUpdate", "sonarUpdate(sonar,${payloadArg(0)},clear)" ,"resourcemodelbutler" ) 
								}
						}
					}
					 transition(edgeName="t02",targetState="handleSonarData",cond=whenDispatch("sonarRobot"))
				}	 
			}
		}
}

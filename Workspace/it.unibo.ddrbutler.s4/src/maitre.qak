System maitre
 
mqttBroker "localhost" : 1883 

/* BUTLER MESSAGES */
Dispatch taskChange : taskChange(NAME, TASK, FC, QNT)

Dispatch prepareCompleted : prepareCompleted
Dispatch addFoodCompleted : addFoodCompleted
Dispatch clearCompleted : clearCompleted

Dispatch notifyPrepare : notifyPrepare
Dispatch notifyAddFood : notifyAddFood
Dispatch notifyClear : notifyClear

Dispatch updateCompleted:updateCompleted

Event alert : alert

/* MAITRE MESSAGES */
Dispatch prepareSended : prepareSended
Dispatch addFoodSended : addFoodSended
Dispatch clearSended : clearSended

Dispatch stop : stop
Dispatch reactivate : reactivate

/* MODEL MAITRE CHANGES */
Dispatch modelUpdateMaitre : modelUpdateMaitre(NAME, STATE)

/* UPDATING STATE ROOM */
Event updateContent : updateContent(DEVICE, TYPE, FOODCODE, QNT, OP_T)


Context ctxMaitre ip [host="localhost" port=3031] -mqtt
//Context ctxButler ip [host="localhost" port=3030] -mqtt

//ExternalQActor resourcemodelbutler context ctxButler

QActor maitre context ctxMaitre {
	["
		var stateToReturn=\"\"
	"]
	
	State s0 initial {
		println("[MAITRE]: starts...")
		run itunibo.maitre.maitreGUI.init(myself)
		solve(consult("sysRules.pl"))
		
		/*initial values */
		solve(assert(content(pantry, dish, null, 20)))
		solve(assert(content(dishwasher, dish, null, 0)))
		
		run itunibo.maitre.fridgeInteraction.enableObserving(myself)
		run itunibo.maitre.fridgeInteraction.getContent(myself)
	}
	Goto initStateRoom
	
	State initStateRoom {
		run itunibo.maitre.maitreGUI.readFromFile()
	}
	Goto sendingPrepare
	
	/* PREPARE */
	State sendingPrepare {
		println("[MAITRE]: I'm in sendingPrepare")
		["stateToReturn=\"sendingPrepare\""]
		run itunibo.maitre.maitreGUI.enableOnlyPrepare()
	}
	Transition t0 whenMsg prepareSended -> notifyPrepare
				  whenEvent updateContent -> update
	
	State notifyPrepare {
		//forward resourcemodelbutler -m taskChange : taskChange(butler, prepare, null, null)
		["forward(\"taskChange\",\"taskChange(butler, prepare, null, null)\",\"resourcemodelbutler\")"]
	}	
	Goto waitingPrepCompleted
		  				  
	State waitingPrepCompleted {
		run itunibo.maitre.maitreGUI.enableOnlySR()
		["stateToReturn=\"waitingPrepCompleted\""]
		forward maitremodel -m modelUpdateMaitre : modelUpdate(maitre, prepare)
		println("[MAITRE]: waiting for a prepareCompleted...")
	}
	Transition t0 whenMsg notifyPrepare -> sendingAC
				  whenEvent updateContent -> update
	
	/* ADD FOOD / CLEAR */
	State sendingAC {
		println("[MAITRE]: I'm in sendingAC")
		run itunibo.maitre.maitreGUI.enableOnlyAC()
		["stateToReturn=\"sendingAC\""]
	}
	Transition t0 whenMsg addFoodSended -> notifyAddFood
				  whenMsg clearSended -> notifyClear
				  whenEvent updateContent -> update 
	
	State notifyAddFood {
		//forward resourcemodelbutler -m taskChange : taskChange(butler, add_food, taralli, 5)
		["forward(\"taskChange\",\"taskChange(butler, add_food, taralli, 30)\",\"resourcemodelbutler\")"]
	}	
	Goto waitingAddFoodCompleted
					  
	State waitingAddFoodCompleted {
		run itunibo.maitre.maitreGUI.enableOnlySR()
		["stateToReturn=\"waitingAddFoodCompleted\""]
		forward maitremodel -m modelUpdateMaitre : modelUpdate(maitre, addFood)
		println("[MAITRE]: waiting for an addFoodCompleted...")

	}
	Transition t0 whenMsg notifyAddFood -> sendingAC
				  whenEvent updateContent -> update
				  whenEvent alert -> handleWarning

	State notifyClear {
		//forward resourcemodelbutler -m taskChange : taskChange(butler, clear, null, null)
		["forward(\"taskChange\",\"taskChange(butler, clear, null, null)\",\"resourcemodelbutler\")"]
	}	
	Goto waitingClearCompleted
	
	State waitingClearCompleted {
		run itunibo.maitre.maitreGUI.enableOnlySR()
		["stateToReturn=\"waitingClearCompleted\""]
		forward maitremodel -m modelUpdateMaitre : modelUpdate(maitre, clear)
		println("[MAITRE]: waiting for a clearCompleted...")

	}
	Transition t0 whenMsg notifyClear -> sendingPrepare
				 whenEvent updateContent -> update
	
	/* UPDATE */
	State update{
		onMsg(updateContent : updateContent(DEVICE, TYPE, FOODCODE, QNT, OP_T)){
			println("[MAITRE]: msg from ${payloadArg(0)}, type ${payloadArg(1)}, foodCode ${payloadArg(2)}, qnt ${payloadArg(3)}")
			
			solve(content($payloadArg(0), $payloadArg(1), $payloadArg(2), X))
			ifSolved {
				["
					var old = Integer.parseInt(getCurSol(\"X\").toString())
					var difference = Integer.parseInt(payloadArg(3))
					var New = 0					

					if(payloadArg(4).equals(\"put\")){
						New = old + difference
					}
					if(payloadArg(4).equals(\"take\")){
						New = old - difference
					}
				"]
				solve(replaceRule(content($payloadArg(0), $payloadArg(1), $payloadArg(2), _), content($payloadArg(0), $payloadArg(1), $payloadArg(2), $New)))		
				ifSolved {
					println("[MAITRE]: I've replaced a line")	
					
				}
				else {
					println("[MAITRE]: error in replacing the new line")
				}			
			}
			else {
				solve(assert(content($payloadArg(0), $payloadArg(1), $payloadArg(2), $payloadArg(3))))
				ifSolved {
					println("[MAITRE]: I've added a new line")
					
				}
				else {
					println("[MAITRE]: error in adding a new line")
				}	
			}			
		}
		
		run itunibo.maitre.maitreGUI.readFromFile()
		forward maitre -m updateCompleted:updateCompleted
	}
	Transition t0 whenMsg updateCompleted and "stateToReturn.equals(\"sendingPrepare\")" -> sendingPrepare
			  	  whenMsg updateCompleted and "stateToReturn.equals(\"waitingPrepCompleted\")" -> waitingPrepCompleted
			  	  whenMsg updateCompleted and "stateToReturn.equals(\"sendingAC\")" -> sendingAC
			  	  whenMsg updateCompleted and "stateToReturn.equals(\"waitingAddFoodCompleted\")" -> waitingAddFoodCompleted
			   	  whenMsg updateCompleted and "stateToReturn.equals(\"waitingClearCompleted\")" -> waitingClearCompleted
	
	
	/* */
	State handleWarning{
		println("[MAITRE]: received an alert")
		
		run itunibo.maitre.maitreGUI.warning()
	}
	Transition t0 whenMsg notifyAddFood -> sendingAC
	
}

/* MAITRE MODEL */
QActor maitremodel context ctxMaitre {
	State s0 initial {
		println("[MAITRE_MODEL]: starts...")
		solve(consult("sysRules.pl"))
		
	}
	Goto waitingCmd
	
	State waitingCmd {
		println("[MAITRE_MODEL]: waiting for a command...")
	}
	Transition t0 whenMsg modelUpdateMaitre -> modelUpdating
						
	State modelUpdating {
		printCurrentMessage
		println("[MAITRE_MODEL]: updating model...")
		
		onMsg(modelUpdateMaitre : modelUpdateMaitre(maitre, STATE)) {
			run itunibo.maitre.resourceModelSupport.updateMaitreModel(myself, payloadArg(1))
		}
	}
	Goto waitingCmd					
}

/*QActor console context ctxMaitre{
	State s0 initial{
		println("[CONSOLE]: Started...")
		
		run itunibo.utilities.messageGeneratorSupport.create(myself,"CONSOLE")
		
	}
}*/
System ddrbutler

/*MESSAGGI */
Event sonarRobot : sonarRobot(DISTANCE)
Event obstacle : obstacle

//butler
Dispatch prepare : prepare
Dispatch addFood : addFood(FOODCODE,QNT)
Dispatch clear : clear
Dispatch stop : stop											//basta un unico stop per tutti
Dispatch reactivate : reactivate

Dispatch preparingCompletedA1 : preparingCompletedA1
Dispatch preparingCompletedA2 : preparingCompletedA2
Dispatch preparingCompletedReturnRH : preparingCompletedReturnRH

Dispatch addingCompletedA6 : addingCompletedA6
Dispatch addingCompletedA7 : addingCompletedA7
Dispatch addingCompletedReturnRH : addingCompletedReturnRH

Dispatch clearingCompletedA4 : clearingCompetedA4
Dispatch clearingCompletedA5 : clearingCompetedA5
Dispatch clearingCompletedReturnRH : clearingCompletedReturnRH

Dispatch prepareCompleted : prepareCompleted
Dispatch addFoodCompleted : addFoodCompleted
Dispatch clearCompleted : clearCompleted

Dispatch warning : warning

//maitre
Dispatch prepareSended : prepareSended
Dispatch addFoodSended : addFoodSended
Dispatch clearSended : clearSended


//fridge
Dispatch query : query( FOODCODE, QNT )
Dispatch answer : answer(FOODCODE, ANS)

Dispatch putFood : putFood( FOODCODE, QNT )
Dispatch takeFood : takeFood( FOODCODE, QNT )

Dispatch get : get
Dispatch content : content(CONTENT)

//pantry
Dispatch pantryPutDish : putDish( QNT )
Dispatch pantryTakeDish : takeDish( QNT )

//dishwasher
Dispatch dishwasherPutDish : putDish( QNT )
Dispatch dishwasherTakeDish : takeDish( QNT )

//table
Dispatch putElement : putElement( TYPE, CODE, QNT )
Dispatch takeElement : takeElement( TYPE, CODE, QNT )

//aggiornamento stato stanza
Event updateContent : updateContent(DEVICE,CODE,QNT)

Context ctxButler ip [host="localhost" port=3030]

QActor sonarhandler context ctxButler{
	/*
	 * Ha il compito di ricevere i dati dal sonar,
	 * in realtà questo viene già fatto da robotSupport
	 */
	State s0 initial{
		println("[SONAR HANDLER]: Started...")
	}
	Goto waitData
	
	State waitData {
		println("[SONAR HANDLER]: Sono in waitData")
		
	}
	Transition t0 whenEvent sonarRobot -> handleData
	
	State handleData{
		println("[SONAR HANDLER]: Sono in handleData")
		
	}
	Goto waitData
}

QActor obstacledetector context ctxButler{
	State s0 initial{
		println("[OBSTACLE DETECTOR]: Started...")
		
	}
	Goto waitSonarData
	
	State waitSonarData{
		println("[OBSTACLE DETECTOR]: Sono in waitSonarData")
		
		delay 1000
		emit obstacle:obstacle
		delay 1000
		emit obstacle:obstacle
		delay 1000
		emit obstacle:obstacle
		delay 1000
		emit obstacle:obstacle
	}
	Transition t0 whenEvent sonarRobot -> handleSonarData
	
	State handleSonarData{
		println("[OBSTACLE DETECTOR]: Sono in handleSonarData")
		
		/*Determina se ci si trova di fronte ad un ostacolo ed emette un evento */
	}
	Goto waitSonarData
}

QActor butler context ctxButler{
	["var positive=false"]
	
	State s0 initial{
		println("[BUTLER]: Started...")
		
	}
	Goto waitPrepare
	
	State waitPrepare{
		println("[BUTLER]: Sono in waitPrepare")
		
	}
	Transition t0 whenMsg prepare -> preparingA1
	
	State preparingA1{
		println("[BUTLER]: Sono in preparingA1")
		
		//simulazione comportamento
		delay 1000
		
		forward butler -m preparingCompletedA1 : preparingCompletedA1
		
	}
	Transition t0 whenMsg stop -> suspendedA1
				  whenMsg preparingCompletedA1 -> preparingA2
	
	State suspendedA1{
		println("[BUTLER]: Sono in suspendedA1")
		
	}
	Transition t0 whenMsg stop -> suspendedA1
				  whenMsg reactivate -> preparingA1
				  
	State preparingA2{
		println("[BUTLER]: Sono in preparingA2")
		
		//simulazione comportamento
		delay 1000
		
		forward butler -m preparingCompletedA2 : preparingCompletedA2
		
		
	}
	Transition t0 whenMsg stop -> suspendedA2
				  whenMsg preparingCompletedA2 -> preparingReturnRH
				  
	State suspendedA2{
		println("[BUTLER]: Sono in suspendedA2")
		
	}
	Transition t0 whenMsg stop -> suspendedA2
				  whenMsg reactivate -> preparingA2
				  
	State preparingReturnRH{
		println("[BUTLER]: Sono in preparingReturnRH")
		
		//simulazione comportamento
		delay 1000
		
		forward butler -m preparingCompletedReturnRH : preparingCompletedReturnRH
		forward maitre -m prepareCompleted : prepareCompleted
	}
	Transition t0 whenMsg stop -> suspendedReturnRH
				  whenMsg preparingCompletedReturnRH -> waitAC
				  
	State suspendedReturnRH{
		println("[BUTLER]: Sono in suspendedReturnRH")
		
	}
	Transition t0 whenMsg stop -> suspendedReturnRH
				  whenMsg reactivate -> preparingReturnRH
				  
	State waitAC{
		println("[BUTLER]: Sono in waitAC")
		
		
	}
	Transition t0 whenMsg addFood -> addingA6
				  whenMsg clear -> clearingA4
				  
	State addingA6{
		println("[BUTLER]: Sono in addingA6")
		
		onMsg( addFood : addFood(FOODCODE,QNT)){
			//mando richiesta al frigo
			forward fridge -m query : query($payloadArg(0),$payloadArg(1))	
		}
		
	}
	Transition t0 whenMsg answer -> checkAnswer
	
	State checkAnswer{
		println("[BUTLER]: Sono in checkAnswer")
		
		onMsg( answer : answer(FOODCODE, ANS)){
			["positive=payloadArg(1).equals(\"yes\")"]			
		}
	}
	Goto addingA7 if "positive" else addingReturnRH
	
	State addingA7{
		println("[BUTLER]: Sono in addingA7")
		
		//simulazione comportamento
		delay 1000
		
		forward butler -m addingCompletedA7 : addingCompletedA7
		
	}
	Transition t0 whenMsg stop -> suspendedA7
				  whenMsg addingCompletedA7 -> addingReturnRH
				  
    State suspendedA7{
		println("[BUTLER]: Sono in suspendedA7")
		
	}
	Transition t0 whenMsg stop -> suspendedA7
				  whenMsg reactivate -> addingA7
				  
	State addingReturnRH{
		println("[BUTLER]: Sono in addingReturnRH")
		
		//simulazione comportamento
		delay 1000
		
		forward butler -m addingCompletedReturnRH : addingCompletedReturnRH
		forward maitre -m addFoodCompleted : addFoodCompleted
	}
	Transition t0 whenMsg stop -> suspendedAddingReturnRH
				  whenMsg addingCompletedReturnRH -> waitAC
				  
	State suspendedAddingReturnRH{
		println("[BUTLER]: Sono in suspendedAddingReturnRH")
		
	}
	Transition t0 whenMsg stop -> suspendedAddingReturnRH
				  whenMsg reactivate -> addingReturnRH

	State clearingA4{
		println("[BUTLER]: Sono in clearingA4")
		
		//simulazione comportamento
		delay 1000
		
		forward butler -m clearingCompletedA4 : clearingCompletedA4
		
	}
	Transition t0 whenMsg stop -> suspendedA4
				  whenMsg clearingCompletedA4 -> clearingA5
				  
    State suspendedA4{
		println("[BUTLER]: Sono in suspendedA4")
		
	}
	Transition t0 whenMsg stop -> suspendedA4
				  whenMsg reactivate -> clearingA4
				  
	State clearingA5{
		println("[BUTLER]: Sono in clearingA5")
		
		//simulazione comportamento
		delay 1000
		
		forward butler -m clearingCompletedA5 : clearingCompletedA5
		
	}
	Transition t0 whenMsg stop -> suspendedA5
				  whenMsg clearingCompletedA5 -> clearingReturnRH
				  
    State suspendedA5{
		println("[BUTLER]: Sono in suspendedA5")
		
	}
	Transition t0 whenMsg stop -> suspendedA5
				  whenMsg reactivate -> clearingA5
				  
	State clearingReturnRH{
		println("[BUTLER]: Sono in clearingReturnRH")
		
		//simulazione comportamento
		delay 1000
		
		forward butler -m clearingCompletedReturnRH : clearingCompletedReturnRH
		forward maitre -m clearCompleted : clearCompleted
	}
	Transition t0 whenMsg stop -> suspendedClearingReturnRH
				  whenMsg clearingCompletedReturnRH -> waitPrepare
				  
	State suspendedClearingReturnRH{
		println("[BUTLER]: Sono in suspendedClearingReturnRH")
		
	}
	Transition t0 whenMsg stop -> suspendedClearingReturnRH
				  whenMsg reactivate -> clearingReturnRH
}

QActor maitre context ctxButler{
	State s0 initial{
		println("[MAITRE]: Started...")
		
		delay 4000
		
		//simulo
		forward butler -m prepare : prepare
	}
}

QActor fridge context ctxButler{
	State s0 initial{
		println("[FRIDGE]: Started...")
	}
	Goto waitCmd
	
	State waitCmd{
		println("[FRIDGE]: Sono in waitCmd")
		
	}
	Transition t0 whenMsg query -> answering
				  whenMsg putFood -> puttingFood
				  whenMsg takeFood -> takingFood
				  whenMsg get -> gettingContent
				  
	State gettingContent{
		println("[FRIDGE]: Sono in gettingContent")
		
	}
	Goto waitCmd
				  
	State answering{
		println("[FRIDGE]: Sono in answering")
		
		onMsg( query : query(FOODCODE, QNT)){
			
			forward butler -m answer : answer($payloadArg(0),yes)
		}
		
	}
	Goto waitCmd
	
	State puttingFood{
		println("[FRIDGE]: Sono in puttingFood")
		
		onMsg( putFood : putFood(FOODCODE, QNT)){
			
		}
	}
	Goto waitCmd
	
	State takingFood{
		println("[FRIDGE]: Sono in takingFood")
		
		onMsg( takeFood : takeFood(FOODCODE, QNT)){
			
		}
		
	}
	Goto waitCmd
	
}

QActor pantry context ctxButler{
	State s0 initial{
		println("[PANTRY]: Started...")
	}
	Goto waitCmd
	
	State waitCmd{
		println("[PANTRY]: Sono in waitCmd")
		
	}
	Transition t0 whenMsg pantryPutDish -> puttingDish
				  whenMsg pantryTakeDish -> takingDish
	
	State puttingDish{
		println("[PANTRY]: Sono in puttingDish")
		
		onMsg( pantryPutDish : pantryPutDish(QNT)){
			
		}
		
	}
	Goto waitCmd
	
	State takingDish{
		println("[PANTRY]: Sono in takingDish")
		
		onMsg( pantryTakeDish : pantryTakeDish(QNT)){
			
		}
		
	}
	Goto waitCmd
	
}

QActor dishwasher context ctxButler{
	State s0 initial{
		println("[DISHWASHER]: Started...")
	}
	Goto waitCmd
	
	State waitCmd{
		println("[DISHWASHER]: Sono in waitCmd")
		
	}
	Transition t0 whenMsg dishwasherPutDish -> puttingDish
				  whenMsg dishwasherTakeDish -> takingDish
	
	State puttingDish{
		println("[DISHWASHER]: Sono in puttingDish")
		
		onMsg( dishwasherPutDish : dishwasherPutDish(QNT)){
			
		}
		
	}
	Goto waitCmd
	
	State takingDish{
		println("[DISHWASHER]: Sono in takingDish")
		
		onMsg( dishwasherTakeDish : dishwasherTakeDish(QNT)){
			
		}
	}
	Goto waitCmd
	
}

QActor table context ctxButler{
	State s0 initial{
		println("[TABLE]: Started...")
	}
	Goto waitCmd
	
	State waitCmd{
		println("[TABLE]: Sono in waitCmd")
		
	}
	Transition t0 whenMsg putElement -> puttingElement
				  whenMsg takeElement -> takingElement
	
	State puttingElement{
		println("[TABLE]: Sono in puttingElement")
		
		onMsg( putElement : putElement( TYPE, CODE, QNT)){
			
		}
		
	}
	Goto waitCmd
	
	State takingElement{
		println("[TABLE]: Sono in takingElement")
		
		onMsg( takeElement : takeElement( TYPE, CODE, QNT)){
			
		}
	}
	Goto waitCmd
	
}
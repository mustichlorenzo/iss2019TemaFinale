/* Generated by AN DISI Unibo */ 
package it.unibo.fridge

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fridge ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var qnt=-1
				var foodcode=""
				var goToPut=false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[FRIDGE]: Started...")
						itunibo.fridge.fridgeSupport.create(  )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						forward("modelUpdateFridge", "modelUpdateFridge(fridge,idle,null,null)" ,"resourcemodelfridge" ) 
					}
					 transition(edgeName="t00",targetState="analyzeMessage",cond=whenDispatch("modelChangedFridge"))
				}	 
				state("analyzeMessage") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("modelChangedFridge(NAME,TASK,FOODCODE,QNT)"), Term.createTerm("modelChangedFridge(NAME,TASK,FOODCODE,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(payloadArg(1).equals("put")){
												goToPut=true
											}
								if(payloadArg(1).equals("take")){
												goToPut=false
											}
								qnt = Integer.parseInt(payloadArg(3))
								foodcode = payloadArg(2)
						}
					}
					 transition( edgeName="goto",targetState="putFood", cond=doswitchGuarded({goToPut}) )
					transition( edgeName="goto",targetState="takeFood", cond=doswitchGuarded({! goToPut}) )
				}	 
				state("putFood") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("modelUpdateFridge", "modelUpdateFridge(fridge,put,null,null)" ,"resourcemodelfridge" ) 
						itunibo.fridge.fridgeSupport.putFood(myself ,foodcode, qnt )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("takeFood") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						forward("modelUpdateFridge", "modelUpdateFridge(fridge,take,null,null)" ,"resourcemodelfridge" ) 
						itunibo.fridge.fridgeSupport.takeFood(myself ,foodcode, qnt )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}

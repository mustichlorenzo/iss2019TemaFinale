/* Generated by AN DISI Unibo */ 
package it.unibo.modelmanagerbutler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Modelmanagerbutler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[MODELMANAGER BUTLER]: Started...")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("[MODELMANAGER BUTLER]: Sono in waitCmd")
					}
					 transition(edgeName="t039",targetState="handleCommand",cond=whenDispatch("stateChanged"))
					transition(edgeName="t040",targetState="handleCommand",cond=whenDispatch("taskChanged"))
					transition(edgeName="t041",targetState="handleCommand",cond=whenDispatch("actionChange"))
					transition(edgeName="t042",targetState="handleCommand",cond=whenDispatch("positionUpdate"))
					transition(edgeName="t043",targetState="handleCommand",cond=whenDispatch("boardDishChanged"))
					transition(edgeName="t044",targetState="handleCommand",cond=whenDispatch("boardFoodChanged"))
					transition(edgeName="t045",targetState="handleCommand",cond=whenDispatch("dishUpdate"))
					transition(edgeName="t046",targetState="handleCommand",cond=whenDispatch("foodUpdate"))
				}	 
				state("handleCommand") { //this:State
					action { //it:State
						println("[MODELMANAGER BUTLER]: Sono in handleCommand")
						if( checkMsgContent( Term.createTerm("stateChanged(DEVICE,STATE)"), Term.createTerm("stateChanged(pantry,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("dishUpdate(DEVICE,QNT)"), Term.createTerm("dishUpdate(pantry,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("stateChanged(DEVICE,STATE)"), Term.createTerm("stateChanged(dishwasher,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("dishUpdate(DEVICE,QNT)"), Term.createTerm("dishUpdate(dishwasher,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("stateChanged(DEVICE,STATE)"), Term.createTerm("stateChanged(table,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("dishUpdate(DEVICE,QNT)"), Term.createTerm("dishUpdate(table,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("foodUpdate(DEVICE,FOODCODE,QNT)"), Term.createTerm("foodUpdate(table,FOODCODE,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("stateChanged(DEVICE,STATE)"), Term.createTerm("stateChanged(butler,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("taskChanged(DEVICE,TASK)"), Term.createTerm("taskChanged(butler,TASK)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("positionUpdate(DEVICE,NAME)"), Term.createTerm("positionUpdate(butler,NAME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("boardDishChanged(DEVICE,QNT)"), Term.createTerm("boardDishChanged(butler,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("boardFoodChanged(DEVICE,FOODCODE,QNT)"), Term.createTerm("boardFoodChanged(butler,FOODCODE,QNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
						}
						if( checkMsgContent( Term.createTerm("actionChange(ACTION)"), Term.createTerm("actionChange(ACTION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("robotCmd", "robotCmd(${payloadArg(0)})" ,"basicrobot" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}

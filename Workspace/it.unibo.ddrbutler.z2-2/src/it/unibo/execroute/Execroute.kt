/* Generated by AN DISI Unibo */ 
package it.unibo.execroute

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Execroute ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[EXEC-ROUTE]: Started...")
					}
					 transition( edgeName="goto",targetState="waitStart", cond=doswitch() )
				}	 
				state("waitStart") { //this:State
					action { //it:State
						println("[EXEC-ROUTE]: Sono in waitStart")
					}
					 transition(edgeName="t021",targetState="scheduling",cond=whenDispatch("startPlanning"))
				}	 
				state("scheduling") { //this:State
					action { //it:State
						println("[EXEC-ROUTE]: Sono in scheduling")
						delay(1000) 
						forward("move", "move(w)" ,"execroute" ) 
					}
					 transition(edgeName="t022",targetState="executing",cond=whenDispatch("move"))
					transition(edgeName="t023",targetState="suspendedScheduling",cond=whenDispatch("stop"))
				}	 
				state("executing") { //this:State
					action { //it:State
						println("[EXEC-ROUTE]: Sono in executing")
						if( checkMsgContent( Term.createTerm("move(X)"), Term.createTerm("move(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("actionChanged", "actionChanged(execroute,${payloadArg(0)})" ,"modelmanagerbutler" ) 
						}
					}
					 transition(edgeName="t024",targetState="handleObstacle",cond=whenEvent("obstacle"))
					transition(edgeName="t025",targetState="scheduling",cond=whenDispatch("movementCompleted"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						println("[EXEC-ROUTE]: Sono in handleObstacle")
					}
					 transition( edgeName="goto",targetState="backtracking", cond=doswitch() )
				}	 
				state("backtracking") { //this:State
					action { //it:State
						println("[EXEC-ROUTE]: Sono in backtracking")
						forward("robotCmd", "robotCmd(execroute,s)" ,"basicrobot" ) 
					}
					 transition(edgeName="t026",targetState="waitObstacleMoving",cond=whenDispatch("movementCompleted"))
				}	 
				state("waitObstacleMoving") { //this:State
					action { //it:State
						println("[EXEC-ROUTE]: Sono in waitObstacleMoving")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="scheduling", cond=doswitch() )
				}	 
				state("suspendedScheduling") { //this:State
					action { //it:State
						println("[EXEC-ROUTE]: Sono in suspendedScheduling")
					}
					 transition(edgeName="t027",targetState="suspendedScheduling",cond=whenDispatch("stop"))
					transition(edgeName="t028",targetState="scheduling",cond=whenDispatch("reactivate"))
				}	 
			}
		}
}

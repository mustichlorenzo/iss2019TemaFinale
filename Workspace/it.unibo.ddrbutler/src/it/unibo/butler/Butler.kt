/* Generated by AN DISI Unibo */ 
package it.unibo.butler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[BUTLER]: Started...")
					}
					 transition( edgeName="goto",targetState="calibrazione", cond=doswitch() )
				}	 
				state("calibrazione") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in calibrazione")
						delay(2000) 
						forward("calibrazioneCompleted", "calibrazioneCompleted" ,"butler" ) 
					}
					 transition(edgeName="t00",targetState="waitPrepare",cond=whenDispatch("calibrazioneCompleted"))
				}	 
				state("waitPrepare") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in waitPrepare")
					}
					 transition(edgeName="t01",targetState="preparing",cond=whenDispatch("prepare"))
				}	 
				state("preparing") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in preparing")
						delay(1000) 
						forward("prepareCompleted", "prepareCompleted" ,"butler" ) 
					}
					 transition(edgeName="t02",targetState="wait2",cond=whenDispatch("prepareCompleted"))
					transition(edgeName="t03",targetState="prepareSuspend",cond=whenDispatch("stopPrepare"))
				}	 
				state("prepareSuspend") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in prepareSuspend")
					}
					 transition(edgeName="t04",targetState="preparing",cond=whenDispatch("reactivatePrepare"))
				}	 
				state("wait2") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in wait2")
					}
					 transition(edgeName="t05",targetState="adding",cond=whenDispatch("addFood"))
					transition(edgeName="t06",targetState="clearing",cond=whenDispatch("clear"))
				}	 
				state("adding") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in adding")
						delay(1000) 
						forward("addFoodCompleted", "addFoodCompleted" ,"butler" ) 
					}
					 transition(edgeName="t07",targetState="wait2",cond=whenDispatch("addFoodCompleted"))
					transition(edgeName="t08",targetState="addFoodSuspend",cond=whenDispatch("stopAddFood"))
				}	 
				state("clearing") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in clearing")
						delay(1000) 
						forward("clearCompleted", "clearCompleted" ,"butler" ) 
					}
					 transition(edgeName="t09",targetState="waitPrepare",cond=whenDispatch("clearCompleted"))
					transition(edgeName="t010",targetState="clearSuspend",cond=whenDispatch("stopClear"))
				}	 
				state("addFoodSuspend") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in addFoodSuspend")
					}
					 transition(edgeName="t011",targetState="adding",cond=whenDispatch("reactivateAddFood"))
				}	 
				state("clearSuspend") { //this:State
					action { //it:State
						println("[BUTLER]: Sono in clearSuspend")
					}
					 transition(edgeName="t012",targetState="clearing",cond=whenDispatch("reactivateClear"))
				}	 
			}
		}
}

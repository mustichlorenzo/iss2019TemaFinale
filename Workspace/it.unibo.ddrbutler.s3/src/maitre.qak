System maitre

/* BUTLER MESSAGES */
Dispatch taskChange : taskChange(NAME, TASK, FC, QNT)

Dispatch prepareCompleted : prepareCompleted
Dispatch addFoodCompleted : addFoodCompleted
Dispatch clearCompleted : clearCompleted

Event alert : alert

/* MAITRE MESSAGES */
Dispatch prepareSended : prepareSended
Dispatch addFoodSended : addFoodSended
Dispatch clearSended : clearSended

Dispatch stop : stop
Dispatch reactivate : reactivate

Dispatch updateMaitre : updateMaitre

/* MODEL MAITRE CHANGES */
Dispatch modelChangeMaitre : modelChangeMaitre(NAME, STATE)
Dispatch modelChangedMaitre : modelChangedMaitre(NAME, TASK)
Dispatch modelUpdateMaitre : modelUpdateMaitre(NAME, STATE)

/* UPDATING STATE ROOM */
Event updateContent : updateContent(DEVICE, TYPE, FOODCODE, QNT)


Context ctxMaitre ip [host="localhost" port=3031]
Context ctxButler ip [host="localhost" port=3030]

ExternalQActor resourcemodelbutler context ctxButler

QActor maitre context ctxMaitre {
	State s0 initial {
		println("[MAITRE]: starts...")
		run itunibo.maitre.maitreGUI.init(myself)
	}
	Goto sendingPrepare
	
	/* PREPARE */
	State sendingPrepare {
		println("[MAITRE]: I'm in sendingPrepare")
		run itunibo.maitre.maitreGUI.enableOnlyPrepare()
	}
	Transition t0 whenMsg prepareSended -> waitingPrepCompleted
				  whenMsg updateMaitre -> updateSP // ?
				  				  
	State waitingPrepCompleted {
		run itunibo.maitre.maitreGUI.enableOnlySR()
		
		forward maitremodel -m modelUpdateMaitre : modelUpdate(maitre, prepare)
		forward resourcemodelbutler -m taskChange : taskChange(butler, prepare, null, null)
		println("[MAITRE]: waiting for a prepareCompleted...")
	}
	Transition t0 whenMsg modelChangedMaitre -> sendingAC
				  whenMsg updateMaitre -> updateP 
	
	/* ADD FOOD / CLEAR */
	State sendingAC {
		println("[MAITRE]: I'm in sendingAC")
		run itunibo.maitre.maitreGUI.enableOnlyAC()
	}
	Transition t0 whenMsg addFoodSended -> waitingAddFoodCompleted
				  whenMsg clearSended -> waitingClearCompleted
				  whenMsg updateMaitre -> updateP 
				  
	State waitingAddFoodCompleted {
		run itunibo.maitre.maitreGUI.enableOnlySR()
		
		forward maitremodel -m modelUpdateMaitre : modelUpdate(maitre, addFood)
		forward resourcemodelbutler -m taskChange : taskChange(butler, add, taralli, 5)
		println("[MAITRE]: waiting for an addFoodCompleted...")

	}
	Transition t0 whenMsg modelChangedMaitre -> sendingAC
				  whenMsg updateMaitre -> updateAC
				  whenEvent alert -> handleWarning

	State waitingClearCompleted {
		run itunibo.maitre.maitreGUI.enableOnlySR()

		forward maitremodel -m modelUpdateMaitre : modelUpdate(maitre, clear)
		forward resourcemodelbutler -m taskChange : taskChange(butler, clear, null, null)
		println("[MAITRE]: waiting for a clearCompleted...")

	}
	Transition t0 whenMsg modelChangedMaitre -> sendingPrepare
				  whenMsg updateMaitre -> updateC
	
	/* UPDATE */
	State updateSP {
		println("[MAITRE]: I'm in updateSP")
		run itunibo.maitre.maitreGUI.readFromFile()
		
	}
	Goto sendingPrepare
	
	State updateAC {
		println("[MAITRE]: I'm in updateAC")
		run itunibo.maitre.maitreGUI.readFromFile()
		
	}
	Goto sendingAC
	
	State updateP {
		println("[MAITRE]: I'm in updateP")
		run itunibo.maitre.maitreGUI.readFromFile()
		
	}
	Goto waitingPrepCompleted
	
	State updateA {
		println("[MAITRE]: I'm in updateA")
	}
	Goto waitingAddFoodCompleted
	
	State updateC {
		println("[MAITRE]: I'm in updateC")
	}
	Goto waitingClearCompleted
	
	/* */
	State handleWarning{
		println("[MAITRE]: received an alert")
	}
	Goto sendingAC	
}

/* MAITRE MODEL */
QActor maitremodel context ctxMaitre {
	State s0 initial {
		println("[MAITRE_MODEL]: starts...")
		solve(consult("sysRules.pl"))
	}
	Goto waitingCmd
	
	State waitingCmd {
		println("[MAITRE_MODEL]: waiting for a command...")
	}
	Transition t0 whenMsg modelChangeMaitre -> modelChanging
				  whenMsg modelUpdateMaitre -> modelUpdating
				  whenEvent updateContent -> updatingRoom
						
	State modelUpdating {
		println("[MAITRE_MODEL]: updating model...")
		
		onMsg(modelUpdateMaitre : modelUpdateMaitre(maitre, STATE)) {
			run itunibo.maitre.resourceModelSupport.updateMaitreModel(myself, payloadArg(1))
		}
	}
	Goto waitingCmd					
						
	State modelChanging {
		println("[MAITRE_MODEL]: received a modelChange command")
		
		onMsg(modelChangeMaitre : modelChangeMaitre(maitre, STATE)) {
				forward maitre -m modelChangedMaitre : modelChanged
		}
	}
	Goto waitingCmd
	
	State updatingRoom {
		println("[MAITRE_MODEL]: received an updatingRoom command")
		
		onMsg(updateContent : updateContent(DEVICE, TYPE, FOODCODE, QNT)){
			println("[MAITRE_MODEL]: msg from ${payloadArg(0)}, type ${payloadArg(1)}, foodCode ${payloadArg(2)}, qnt ${payloadArg(3)}")
			
			solve(content($payloadArg(0), $payloadArg(1), $payloadArg(2), _))
			ifSolved {
				solve(replaceRule(content($payloadArg(0), $payloadArg(1), $payloadArg(2), _), content($payloadArg(0), $payloadArg(1), $payloadArg(2), $payloadArg(3))))		
				ifSolved {
					println("[MAITRE_MODEL]: I've replaced a line")	
					forward maitre -m updateMaitre : updateMaitre
				}
				else {
					println("[MAITRE_MODEL]: error in replacing the new line")
				}			
			}
			else {
				solve(assert(content($payloadArg(0), $payloadArg(1), $payloadArg(2), $payloadArg(3))))
				ifSolved {
					println("[MAITRE_MODEL]: I've added a new line")
					forward maitre -m updateMaitre : updateMaitre
				}
				else {
					println("[MAITRE_MODEL]: error in adding a new line")
				}	
			}			
		}
	}
	Goto waitingCmd
}
	
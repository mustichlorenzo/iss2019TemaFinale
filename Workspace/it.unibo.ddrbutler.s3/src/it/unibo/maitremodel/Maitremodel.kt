/* Generated by AN DISI Unibo */ 
package it.unibo.maitremodel

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitremodel ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[MAITRE_MODEL]: starts...")
						solve("consult('sysRules.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitingCmd", cond=doswitch() )
				}	 
				state("waitingCmd") { //this:State
					action { //it:State
						println("[MAITRE_MODEL]: waiting for a command...")
					}
					 transition(edgeName="t017",targetState="modelUpdating",cond=whenDispatch("modelUpdateMaitre"))
				}	 
				state("modelUpdating") { //this:State
					action { //it:State
						println("[MAITRE_MODEL]: updating model...")
						if( checkMsgContent( Term.createTerm("modelUpdateMaitre(NAME,STATE)"), Term.createTerm("modelUpdateMaitre(maitre,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.maitre.resourceModelSupport.updateMaitreModel(myself ,payloadArg(1) )
						}
					}
					 transition( edgeName="goto",targetState="waitingCmd", cond=doswitch() )
				}	 
			}
		}
}

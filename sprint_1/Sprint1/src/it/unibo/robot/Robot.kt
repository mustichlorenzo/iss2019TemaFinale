/* Generated by AN DISI Unibo */ 
package it.unibo.robot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[RBR]: starts...")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="prepareCmd",cond=whenDispatch("prepare"))
					transition(edgeName="t01",targetState="addCmd",cond=whenDispatch("add_food"))
					transition(edgeName="t02",targetState="clearCmd",cond=whenDispatch("clear"))
				}	 
				state("prepareCmd") { //this:State
					action { //it:State
						println("[RBR]: preparing room...")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("addCmd") { //this:State
					action { //it:State
						println("[RBR]: adding food...")
						if( checkMsgContent( Term.createTerm("add_food(FOODCODE)"), Term.createTerm("add_food(FOODCODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val FC = payloadArg(0)
								forward("check", "check(FC)" ,"fridge" ) 
						}
					}
					 transition( edgeName="goto",targetState="warningCmd", cond=doswitch() )
				}	 
				state("warningCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("response(FOODCODE,AMOUNT)"), Term.createTerm("response(FOODCODE,AMOUNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val A = Integer.parseInt(payloadArg(1))
								val FC = payloadArg(0)
								if(A == 0)
								forward("warning", "warning(FC)" ,"maitre" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("clearCmd") { //this:State
					action { //it:State
						println("[RBR]: clearing the room...")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
